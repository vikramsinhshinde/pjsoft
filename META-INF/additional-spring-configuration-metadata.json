{
  "groups": [
    {
      "name": "logging",
      "type": "org.springframework.boot.context.logging.LoggingApplicationListener"
    }
  ],
  "properties": [
    {
      "name": "debug",
      "type": "java.lang.Boolean",
      "description": "Enable debug logs.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false
    },
    {
      "name": "logging.charset.console",
      "type": "java.nio.charset.Charset",
      "description": "Charset to use for console output."
    },
    {
      "name": "logging.charset.file",
      "type": "java.nio.charset.Charset",
      "description": "Charset to use for file output."
    },
    {
      "name": "logging.config",
      "type": "java.lang.String",
      "description": "Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.exception-conversion-word",
      "type": "java.lang.String",
      "description": "Conversion word used when logging exceptions.",
      "defaultValue": "%wEx",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.file",
      "type": "java.lang.String",
      "description": "Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.",
      "deprecation": {
        "replacement": "logging.file.name",
        "level": "error"
      }
    },
    {
      "name": "logging.file.clean-history-on-start",
      "type": "java.lang.Boolean",
      "description": "Whether to clean the archive log files on startup. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false,
      "deprecation": {
        "replacement": "logging.logback.rollingpolicy.clean-history-on-start"
      }
    },
    {
      "name": "logging.file.max-history",
      "type": "java.lang.Integer",
      "description": "Maximum number of archive log files to keep. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": 7,
      "deprecation": {
        "replacement": "logging.logback.rollingpolicy.max-history"
      }
    },
    {
      "name": "logging.file.max-size",
      "type": "org.springframework.util.unit.DataSize",
      "description": "Maximum log file size. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "10MB",
      "deprecation": {
        "replacement": "logging.logback.rollingpolicy.max-file-size"
      }
    },
    {
      "name": "logging.file.name",
      "type": "java.lang.String",
      "description": "Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.file.path",
      "type": "java.lang.String",
      "description": "Location of the log file. For instance, `/var/log`.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.file.total-size-cap",
      "type": "org.springframework.util.unit.DataSize",
      "description": "Total size of log backups to be kept. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "0B",
      "deprecation": {
        "replacement": "logging.logback.rollingpolicy.total-size-cap"
      }
    },
    {
      "name": "logging.group",
      "type": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>",
      "description": "Log groups to quickly change multiple loggers at the same time. For instance, `logging.group.db=org.hibernate,org.springframework.jdbc`.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.include-application-name",
      "type": "java.lang.Boolean",
      "description": "Whether to include the application name in the logs.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": true
    },
    {
      "name": "logging.level",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.log4j2.config.override",
      "type": "java.util.List<java.lang.String>",
      "description": "Overriding configuration files used to create a composite configuration."
    },
    {
      "name": "logging.logback.rollingpolicy.clean-history-on-start",
      "type": "java.lang.Boolean",
      "description": "Whether to clean the archive log files on startup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false
    },
    {
      "name": "logging.logback.rollingpolicy.file-name-pattern",
      "type": "java.lang.String",
      "description": "Pattern for rolled-over log file names.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"
    },
    {
      "name": "logging.logback.rollingpolicy.max-file-size",
      "type": "org.springframework.util.unit.DataSize",
      "description": "Maximum log file size.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "10MB"
    },
    {
      "name": "logging.logback.rollingpolicy.max-history",
      "type": "java.lang.Integer",
      "description": "Maximum number of archive log files to keep.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": 7
    },
    {
      "name": "logging.logback.rollingpolicy.total-size-cap",
      "type": "org.springframework.util.unit.DataSize",
      "description": "Total size of log backups to be kept.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "0B"
    },
    {
      "name": "logging.path",
      "type": "java.lang.String",
      "description": "Location of the log file. For instance, `/var/log`.",
      "deprecation": {
        "replacement": "logging.file.path",
        "level": "error"
      }
    },
    {
      "name": "logging.pattern.console",
      "type": "java.lang.String",
      "description": "Appender pattern for output to the console. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    },
    {
      "name": "logging.pattern.correlation",
      "type": "java.lang.String",
      "description": "Appender pattern for log correlation. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.pattern.dateformat",
      "type": "java.lang.String",
      "description": "Appender pattern for log date format. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
    },
    {
      "name": "logging.pattern.file",
      "type": "java.lang.String",
      "description": "Appender pattern for output to a file. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    },
    {
      "name": "logging.pattern.level",
      "type": "java.lang.String",
      "description": "Appender pattern for log level. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%5p"
    },
    {
      "name": "logging.pattern.rolling-file-name",
      "type": "java.lang.String",
      "description": "Pattern for rolled-over log file names. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz",
      "deprecation": {
        "replacement": "logging.logback.rollingpolicy.file-name-pattern"
      }
    },
    {
      "name": "logging.register-shutdown-hook",
      "type": "java.lang.Boolean",
      "description": "Register a shutdown hook for the logging system when it is initialized. Disabled automatically when deployed as a war file.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": true
    },
    {
      "name": "logging.threshold.console",
      "type": "java.lang.String",
      "description": "Log level threshold for console output.",
      "defaultValue": "TRACE"
    },
    {
      "name": "logging.threshold.file",
      "type": "java.lang.String",
      "description": "Log level threshold for file output.",
      "defaultValue": "TRACE"
    },
    {
      "name": "spring.application.index",
      "type": "java.lang.Integer",
      "description": "Application index.",
      "deprecation": {
        "level": "error",
        "reason": "Application context ids are now unique by default."
      }
    },
    {
      "name": "spring.application.name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.ContextIdApplicationContextInitializer",
      "description": "Application name."
    },
    {
      "name": "spring.banner.charset",
      "type": "java.nio.charset.Charset",
      "description": "Banner file encoding.",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.banner.image.bitdepth",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.image.height",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.image.invert",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.image.location",
      "type": "org.springframework.core.io.Resource",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.image.margin",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.image.pixelmode",
      "type": "org.springframework.boot.ImageBanner$PixelMode",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.image.width",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "reason": "Support for image banners has been removed."
      }
    },
    {
      "name": "spring.banner.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner text resource location.",
      "defaultValue": "classpath:banner.txt"
    },
    {
      "name": "spring.beaninfo.ignore",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether to skip search of BeanInfo classes.",
      "defaultValue": true
    },
    {
      "name": "spring.config.activate.on-cloud-platform",
      "type": "org.springframework.boot.cloud.CloudPlatform",
      "description": "Required cloud platform for the document to be included.",
      "sourceType": "org.springframework.boot.context.config.ConfigDataProperties"
    },
    {
      "name": "spring.config.activate.on-profile",
      "type": "java.lang.String[]",
      "description": "Profile expressions that should match for the document to be included.",
      "sourceType": "org.springframework.boot.context.config.ConfigDataProperties"
    },
    {
      "name": "spring.config.additional-location",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.config.ConfigDataEnvironment",
      "description": "Config file locations used in addition to the defaults."
    },
    {
      "name": "spring.config.import",
      "type": "java.util.List<java.lang.String>",
      "description": "Import additional config data.",
      "sourceType": "org.springframework.boot.context.config.ConfigDataProperties"
    },
    {
      "name": "spring.config.location",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.config.ConfigDataEnvironment",
      "description": "Config file locations that replace the defaults."
    },
    {
      "name": "spring.config.name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.config.StandardConfigDataLocationResolver",
      "description": "Config file name.",
      "defaultValue": "application"
    },
    {
      "name": "spring.jpa.defer-datasource-initialization",
      "type": "java.lang.Boolean",
      "description": "Whether to defer DataSource initialization until after any EntityManagerFactory beans have been created and initialized.",
      "defaultValue": false
    },
    {
      "name": "spring.main.allow-bean-definition-overriding",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed.",
      "defaultValue": false
    },
    {
      "name": "spring.main.allow-circular-references",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether to allow circular references between beans and automatically try to resolve them.",
      "defaultValue": false
    },
    {
      "name": "spring.main.banner-mode",
      "type": "org.springframework.boot.Banner$Mode",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Mode used to display the banner when the application runs.",
      "defaultValue": "console"
    },
    {
      "name": "spring.main.cloud-platform",
      "type": "org.springframework.boot.cloud.CloudPlatform",
      "description": "Override the Cloud Platform auto-detection."
    },
    {
      "name": "spring.main.keep-alive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether to keep the application alive even if there are no more non-daemon threads.",
      "defaultValue": false
    },
    {
      "name": "spring.main.lazy-initialization",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether initialization should be performed lazily.",
      "defaultValue": false
    },
    {
      "name": "spring.main.log-startup-info",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether to log information about the application when it starts.",
      "defaultValue": true
    },
    {
      "name": "spring.main.register-shutdown-hook",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Whether the application should have a shutdown hook registered.",
      "defaultValue": true
    },
    {
      "name": "spring.main.show-banner",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Display the banner when the application runs.",
      "defaultValue": true,
      "deprecation": {
        "replacement": "spring.main.banner-mode"
      }
    },
    {
      "name": "spring.main.sources",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Sources (class names, package names, or XML resource locations) to include in the ApplicationContext."
    },
    {
      "name": "spring.main.web-application-type",
      "type": "org.springframework.boot.WebApplicationType",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath."
    },
    {
      "name": "spring.main.web-environment",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.SpringApplication",
      "description": "Run the application in a web environment (auto-detected by default).",
      "deprecation": {
        "replacement": "spring.main.web-application-type"
      }
    },
    {
      "name": "spring.mandatory-file-encoding",
      "sourceType": "org.springframework.boot.context.FileEncodingApplicationListener",
      "type": "java.nio.charset.Charset",
      "description": "Expected character encoding the application must use."
    },
    {
      "name": "spring.output.ansi.enabled",
      "type": "org.springframework.boot.ansi.AnsiOutput$Enabled",
      "description": "Configures the ANSI output.",
      "defaultValue": "detect"
    },
    {
      "name": "spring.pid.fail-on-write-error",
      "type": "java.lang.Boolean",
      "description": "Fails if ApplicationPidFileWriter is used but it cannot write the PID file.",
      "sourceType": "org.springframework.boot.context.ApplicationPidFileWriter"
    },
    {
      "name": "spring.pid.file",
      "type": "java.lang.String",
      "description": "Location of the PID file to write (if ApplicationPidFileWriter is used).",
      "sourceType": "org.springframework.boot.context.ApplicationPidFileWriter"
    },
    {
      "name": "spring.profiles.active",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.springframework.boot.context.config.Profiles",
      "description": "Comma-separated list of active profiles. Can be overridden by a command line switch."
    },
    {
      "name": "spring.profiles.default",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.config.Profiles",
      "description": "Name of the profile to enable if no profile is active.",
      "defaultValue": "default"
    },
    {
      "name": "spring.profiles.group",
      "type": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>",
      "sourceType": "org.springframework.boot.context.config.Profiles",
      "description": "Profile groups to define a logical name for a related group of profiles."
    },
    {
      "name": "spring.profiles.include",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.springframework.boot.context.config.Profiles",
      "description": "Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML)."
    },
    {
      "name": "spring.reactor.debug-agent.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.reactor.ReactorEnvironmentPostProcessor",
      "description": "Whether the Reactor Debug Agent should be enabled when reactor-tools is present.",
      "defaultValue": true
    },
    {
      "name": "trace",
      "type": "java.lang.Boolean",
      "description": "Enable trace logs.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false
    }
  ],
  "hints": [
    {
      "name": "logging.group.values",
      "providers": [
        {
          "name": "logger-name",
          "parameters": {
            "group": false
          }
        }
      ]
    },
    {
      "name": "logging.level.keys",
      "values": [
        {
          "value": "root",
          "description": "Root logger used to assign the default logging level."
        },
        {
          "value": "sql",
          "description": "SQL logging group including Hibernate SQL logger."
        },
        {
          "value": "web",
          "description": "Web logging group including codecs."
        }
      ],
      "providers": [
        {
          "name": "logger-name"
        }
      ]
    },
    {
      "name": "logging.level.values",
      "values": [
        {
          "value": "trace"
        },
        {
          "value": "debug"
        },
        {
          "value": "info"
        },
        {
          "value": "warn"
        },
        {
          "value": "error"
        },
        {
          "value": "fatal"
        },
        {
          "value": "off"
        }
      ],
      "providers": [
        {
          "name": "any"
        }
      ]
    },
    {
      "name": "spring.config.import",
      "values": [
        {
          "value": "file:"
        },
        {
          "value": "classpath:"
        },
        {
          "value": "configtree:"
        }
      ],
      "providers": [
        {
          "name": "any"
        }
      ]
    },
    {
      "name": "spring.profiles.active",
      "providers": [
        {
          "name": "spring-profile-name"
        }
      ]
    },
    {
      "name": "spring.profiles.include",
      "providers": [
        {
          "name": "spring-profile-name"
        }
      ]
    }
  ]
}
